{"name":"CSV Load, Sort, Report","tagline":"Scripts to Load, Sort, and Report on a CSV file","body":"### Installation Instructions\r\nThese scripts simply require [Python](https://www.python.org/) to run. They mainly make use of the Python standard library. To use them, simply clone this repository, or download the code above.\r\n- The [vanilla_approach.py](https://github.com/jasonrdsouza/csv-lsr/blob/master/vanilla_approach.py) script has no external dependancies. \r\n- The [database_approach.py](https://github.com/jasonrdsouza/csv-lsr/blob/master/database_approach.py) script does not require any external libraries to run, but does require [Sqlite3](http://www.sqlite.org/) to be installed in order to use its output. \r\n- The [pandas_approach.ipynb](https://github.com/jasonrdsouza/csv-lsr/blob/master/pandas_approach.ipynb) notebook depends on [IPython Notebook](http://ipython.org/notebook.html), and the [Pandas](http://pandas.pydata.org/) data analysis library.\r\n\r\n\r\n### Overview\r\nThis is a very open ended problem, and each approach represents a slightly different mentality towards coming up with a solution, and involves various benefits and tradeoffs, as discussed below.\r\n\r\n\r\n### Vanilla Approach\r\nThis is the most straightforward solution to the problem. It is object-oriented, and strives to keep things simple, and solve the problem as specified. The data structures chosen focus specifically on the 2 operations required by the spec, at the expense of flexibility.\r\n\r\nRunning this script can be done as follows:\r\n\r\n```bash\r\n~>  python vanilla_approach.py --data INPUT_CSV_FILE\r\n```\r\n\r\nTo see the available command line options, use the `-h` or `--help` flag.\r\n\r\n\r\n### Database Approach\r\nThis approach is a thin wrapper over [Sqlite3](http://www.sqlite.org/). The rationale here is simple. We want to perform queries, and extract relations from the input data. Instead of maintaining custom software to manage the data, and using Python as a data-munging [DSL](http://en.wikipedia.org/wiki/Domain-specific_language), why not leverage an existing solution (SQL), and enjoy the efficiency and reliability of a mature technology.\r\n\r\nThis script simply performs the loading of the input data into a sqlite database. It also has helper methods for the 2 operations required by the spec, but the idea is that the underlying sqlite db file can be used directly as well. \r\n\r\nRunning this script can be done as follows:\r\n\r\n```bash\r\n~>  python database_approach.py --db DB_OUTPUT_FILE --data INPUT_CSV_FILE\r\n```\r\n\r\nTo see the available command line options, use the `-h` or `--help` flag.\r\n\r\n\r\n### Pandas Approach\r\nUsing [IPython Notebook](http://ipython.org/notebook.html) allows for easy interaction with, and analysis of the input data. The advantage of this approach is that it is interactive, and very conducive to exploration. Additionally, [Pandas](http://pandas.pydata.org/) has a lot of convenience functionality built in, which makes playing with the data almost trivial.\r\n\r\nA read-only copy of the notebook can be found [here](http://nbviewer.ipython.org/github/jasonrdsouza/csv-lsr/blob/master/pandas_approach.ipynb). To run the notebook locally, after installing the relevant libraries, run:\r\n\r\n```bash\r\n~> ipython notebook pandas_approach.ipynb\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}